/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pantallas;

import entidades.Cliente;
import entidades.Presupuesto;
import entidades.Producto;
import gestores.GestorCliente;
import gestores.GestorPago;
import gestores.GestorPresupuesto;
import gestores.GestorProducto;
import gestores.GestorVenta;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Float.parseFloat;
import static java.lang.Integer.parseInt;
import static java.lang.Long.parseLong;
import static java.lang.String.valueOf;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.swing.JOptionPane;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author German
 */
public class AltaPresupuesto extends javax.swing.JFrame {

    /**
     * Creates new form AltaPresupuesto
     */
    public AltaPresupuesto() {
        AparienciaPantalla apa = new AparienciaPantalla();
        apa.cambiarApariencia("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        initComponents();
        codigoBarra.requestFocus();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton3 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        BeliminarProducto = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        detalleProducto = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        precioTotal = new javax.swing.JTextField();
        guardarPesup = new javax.swing.JButton();
        ayuda = new javax.swing.JButton();
        cancelarPresup = new javax.swing.JButton();
        listaCliente = new javax.swing.JComboBox();
        nombreCliente = new javax.swing.JTextField();
        direccionCliente = new javax.swing.JTextField();
        clienteElegido = new javax.swing.JTextField();
        telCliente = new javax.swing.JTextField();
        dniCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mailCliente = new javax.swing.JTextField();
        aVenta = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        codigoBarra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        formaDePago = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cantidadRenglon = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jbClienteCasual = new javax.swing.JButton();
        descripcionProducto = new javax.swing.JTextField();
        listaProducto = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        descripcionAgregar = new javax.swing.JButton();
        vAgregarProducto = new javax.swing.JButton();

        jRadioButton3.setText("jRadioButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nuevo presupuesto - Abracasoft");

        BeliminarProducto.setText("Quitar producto");
        BeliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeliminarProductoActionPerformed(evt);
            }
        });

        detalleProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Producto", "Cantidad", "Precio unitario", "Precio neto", "Precio con IVA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(detalleProducto);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Total");

        precioTotal.setEditable(false);
        precioTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        guardarPesup.setText("Guardar e imprimir presupuesto");
        guardarPesup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarPesupActionPerformed(evt);
            }
        });

        ayuda.setText("Ayuda");
        ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ayudaActionPerformed(evt);
            }
        });

        cancelarPresup.setText("Cancelar");
        cancelarPresup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarPresupActionPerformed(evt);
            }
        });

        listaCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listaClienteItemStateChanged(evt);
            }
        });

        nombreCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.lightGray));
        nombreCliente.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                nombreClienteCaretUpdate(evt);
            }
        });

        direccionCliente.setEditable(false);
        direccionCliente.setBackground(new java.awt.Color(204, 204, 204));

        clienteElegido.setEditable(false);
        clienteElegido.setBackground(new java.awt.Color(204, 204, 204));

        telCliente.setEditable(false);
        telCliente.setBackground(new java.awt.Color(204, 204, 204));

        dniCliente.setEditable(false);
        dniCliente.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setText("Apellido y Nombre:");

        jLabel3.setText("Tel:");

        jLabel4.setText("Domicilio:");

        jLabel5.setText("DNI:");

        jLabel6.setText("Mail:");

        mailCliente.setEditable(false);
        mailCliente.setBackground(new java.awt.Color(204, 204, 204));

        aVenta.setText("Transformar en venta e imprimir");
        aVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aVentaActionPerformed(evt);
            }
        });

        jLabel7.setText("Cliente:");

        codigoBarra.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        codigoBarra.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codigoBarraFocusGained(evt);
            }
        });
        codigoBarra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codigoBarraKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codigoBarraKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Codigo:");

        jButton5.setFont(new java.awt.Font("Times", 1, 12)); // NOI18N
        jButton5.setText("Nuevo Cliente");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        formaDePago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Efectivo", "Débito", "Crédito", "Cuenta Corriente", "Pago Parcial" }));
        formaDePago.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                formaDePagoItemStateChanged(evt);
            }
        });

        jLabel9.setText("Forma de pago:");

        cantidadRenglon.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cantidadRenglon.setText("1");
        cantidadRenglon.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cantidadRenglon.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cantidadRenglonKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("x");

        jbClienteCasual.setFont(new java.awt.Font("Times", 1, 12)); // NOI18N
        jbClienteCasual.setText("Cliente Casual");
        jbClienteCasual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbClienteCasualActionPerformed(evt);
            }
        });

        descripcionProducto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        descripcionProducto.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                descripcionProductoCaretUpdate(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Descripción:");

        descripcionAgregar.setText("Agregar producto");
        descripcionAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descripcionAgregarActionPerformed(evt);
            }
        });

        vAgregarProducto.setText("Nuevo producto");
        vAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vAgregarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ayuda)
                        .addGap(225, 225, 225)
                        .addComponent(cancelarPresup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardarPesup, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aVenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel11))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(descripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BeliminarProducto)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(codigoBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(cantidadRenglon, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(vAgregarProducto))
                                            .addComponent(listaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(140, 140, 140)
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(formaDePago, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(jLabel1)
                                                .addGap(18, 18, 18)
                                                .addComponent(precioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(descripcionAgregar)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(listaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(mailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(direccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(clienteElegido, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(telCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbClienteCasual)
                                    .addComponent(jButton5))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clienteElegido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jbClienteCasual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(direccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailCliente))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(precioTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cantidadRenglon, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(codigoBarra, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(vAgregarProducto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formaDePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(descripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BeliminarProducto)
                    .addComponent(descripcionAgregar))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelarPresup, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ayuda, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(guardarPesup, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        getAccessibleContext().setAccessibleName("Alta/Modificación presupuesto - Abracasoft");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ayudaActionPerformed
       abrirAyuda();
    }//GEN-LAST:event_ayudaActionPerformed

    private void cancelarPresupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarPresupActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelarPresupActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        new AltaCliente().setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void codigoBarraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoBarraKeyTyped
        char car = evt.getKeyChar();
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
        if (codigoBarra.getText().trim().length() == 13){
            long codProducto = parseLong(codigoBarra.getText());
            agregarRenglon(codProducto);
        }
    }//GEN-LAST:event_codigoBarraKeyTyped

    private void codigoBarraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoBarraKeyReleased
    
    }//GEN-LAST:event_codigoBarraKeyReleased

    private void nombreClienteCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_nombreClienteCaretUpdate
        buscarMientrasEscribe();
    }//GEN-LAST:event_nombreClienteCaretUpdate

    private void listaClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listaClienteItemStateChanged
        if (listaCliente.getSelectedItem()!=null){
            Cliente c = (Cliente) listaCliente.getSelectedItem();
            clienteElegido.setText(c.getNombreCliente());
            telCliente.setText(valueOf(c.getTelefonoCliente()));
            direccionCliente.setText(c.getDireccionCliente());
            mailCliente.setText(c.getMailCliente());
        }        
    }//GEN-LAST:event_listaClienteItemStateChanged

    private void cantidadRenglonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadRenglonKeyTyped
        char car = evt.getKeyChar();
        if ((car < '0' || car > '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_cantidadRenglonKeyTyped

    private void BeliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeliminarProductoActionPerformed
        eliminarItemProducto();
        actualizarTotal();
    }//GEN-LAST:event_BeliminarProductoActionPerformed

    private void jbClienteCasualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbClienteCasualActionPerformed
        clienteElegido.setText("");
        direccionCliente.setText("");
        telCliente.setText("");
        mailCliente.setText("");
        dniCliente.setText("");
        nombreCliente.setText("");
        listaCliente.removeAllItems();
    }//GEN-LAST:event_jbClienteCasualActionPerformed

    private void formaDePagoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_formaDePagoItemStateChanged
        recalcularImporte();
    }//GEN-LAST:event_formaDePagoItemStateChanged

    private void guardarPesupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarPesupActionPerformed
        if (validar()==true){
            if (crearPresupuesto()!=0){
                this.dispose();
            }
        }
    }//GEN-LAST:event_guardarPesupActionPerformed

    private void aVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aVentaActionPerformed
        if (validar()==true){
            int codigoPresupuesto;
            try{
                codigoPresupuesto=crearPresupuesto();
                concretarVenta(codigoPresupuesto);
            }catch(Error e){
                JOptionPane.showMessageDialog(null, "No se pudo registrar la venta");
            }
        }
    }//GEN-LAST:event_aVentaActionPerformed

    private void descripcionProductoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_descripcionProductoCaretUpdate
        buscarProducto();
    }//GEN-LAST:event_descripcionProductoCaretUpdate

    private void codigoBarraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codigoBarraFocusGained
        descripcionProducto.setText(null);
        listaProducto.removeAllItems();
    }//GEN-LAST:event_codigoBarraFocusGained

    private void descripcionAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descripcionAgregarActionPerformed
        if (listaProducto.getSelectedItem()!=null){
            Producto p = (Producto) listaProducto.getSelectedItem();
            agregarRenglon(p.getCodigoDeProducto());
        }
    }//GEN-LAST:event_descripcionAgregarActionPerformed

    private void vAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vAgregarProductoActionPerformed
        new AltaProducto().setVisible(true);
    }//GEN-LAST:event_vAgregarProductoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AltaPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AltaPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AltaPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AltaPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AltaPresupuesto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BeliminarProducto;
    private javax.swing.JButton aVenta;
    private javax.swing.JButton ayuda;
    private javax.swing.JButton cancelarPresup;
    private javax.swing.JTextField cantidadRenglon;
    private javax.swing.JTextField clienteElegido;
    private javax.swing.JTextField codigoBarra;
    private javax.swing.JButton descripcionAgregar;
    private javax.swing.JTextField descripcionProducto;
    private javax.swing.JTable detalleProducto;
    private javax.swing.JTextField direccionCliente;
    private javax.swing.JTextField dniCliente;
    private javax.swing.JComboBox formaDePago;
    private javax.swing.JButton guardarPesup;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbClienteCasual;
    private javax.swing.JComboBox listaCliente;
    private javax.swing.JComboBox listaProducto;
    private javax.swing.JTextField mailCliente;
    private javax.swing.JTextField nombreCliente;
    private javax.swing.JTextField precioTotal;
    private javax.swing.JTextField telCliente;
    private javax.swing.JButton vAgregarProducto;
    // End of variables declaration//GEN-END:variables
    private String paraBuscar="";
    private Cliente cli;
    private Producto pro;
    private float iva = (float) 1.21;
    
    private void agregarRenglon(long codProducto) {
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        Producto prod = GestorProducto.ConsultaProducto(codProducto);
        int cantidad = 0;
        
        try{
            cantidad = parseInt(cantidadRenglon.getText());
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad");
        }
        float precio;
        int op = formaDePago.getSelectedIndex();
        switch (op){
            case 0:
                if (prod.getPrecioContado()!=0){
                    precio=prod.getPrecioContado();
                }else{
                    if (prod.getPrecioDebito()!=0){
                        precio=prod.getPrecioDebito();
                    }else{
                        precio=prod.getPrecioCredito();
                    }
                }
                break;
            case 1:
                if (prod.getPrecioDebito()!=0){
                    precio=prod.getPrecioDebito();
                }else{
                    if (prod.getPrecioCredito()!=0){
                        precio=prod.getPrecioCredito();
                    }else{
                        precio=prod.getPrecioContado();
                    }
                }
                break;
            default: //Credito y otros
                if (prod.getPrecioCredito()!=0){
                    precio=prod.getPrecioCredito();
                }else{
                    if (prod.getPrecioDebito()!=0){
                        precio=prod.getPrecioDebito();
                    }else{
                        precio=prod.getPrecioContado();
                    }
                }
            break;
        }
        
        int senia = 0;
        if (prod.getCodigoDeProducto() != 0){
            for (int i = 0; i<tabla.getRowCount(); i++){
                if ((tabla.getValueAt(i, 0).toString()).equalsIgnoreCase(valueOf(prod.getCodigoDeProducto())) && senia == 0){
                    int nuevaCantidad = parseInt(tabla.getValueAt(i,2).toString())+cantidad;
                    float precioTotalNuevo = parseFloat(tabla.getValueAt(i,3).toString())*nuevaCantidad;
                    Object [] row = {prod.getCodigoDeProducto(), prod.getNombreProducto(), 
                    nuevaCantidad, precio, precioTotalNuevo, precioTotalNuevo*iva};
                    senia=1;
                    tabla.removeRow(i);
                    tabla.addRow(row);
                }
            }
            if (senia == 0){ 
                Object [] row = {prod.getCodigoDeProducto(), prod.getNombreProducto(), 
                cantidad, precio, precio*cantidad, precio*cantidad*iva};
                tabla.addRow(row);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Error en la lectura del código "
                    + "o producto inexistente");
        }
        
        actualizarTotal();
        codigoBarra.setText("");
        cantidadRenglon.setText("1");
    }
    
    private void buscarProducto(){
        paraBuscar = descripcionProducto.getText();
        if (GestorProducto.ConsultaPorDescripcion(paraBuscar).size() != 0){
            listaProducto.removeAllItems();;
            for (int i = 0; i < GestorProducto.ConsultaPorDescripcion(paraBuscar).size();i++){
                pro = new Producto(GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getCodigoDeProducto(), 
                        GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getNombreProducto(), 
                        GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getPrecioContado(), 
                        GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getPrecioDebito(),
                        GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getPrecioCredito(),
                        GestorProducto.ConsultaPorDescripcion(paraBuscar).get(i).getStockProducto());
                listaProducto.addItem(pro);                
            }
        }
    }

    private void buscarMientrasEscribe() {
        paraBuscar = nombreCliente.getText();
        if (GestorCliente.ConsultaPorDescripcion(paraBuscar).size() != 0) {
            listaCliente.removeAllItems();
            for (int i = 0; i < GestorCliente.ConsultaPorDescripcion(paraBuscar).size(); i++) {
                cli = new Cliente(GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getIdCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getNombreCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getDireccionCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getCodigoPostalCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getTelefonoCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getDniCuilCuit(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getMailCliente());
                listaCliente.addItem(cli);
            }
        }
    }

    private void actualizarTotal() {
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        float suma = 0;
        for (int i = 0; i<tabla.getRowCount(); i++){
            suma += parseFloat(tabla.getValueAt(i,5).toString());
        }
        try{
            precioTotal.setText("$ " + valueOf(suma).substring(0, valueOf(suma).indexOf(".")+3));
        }catch (StringIndexOutOfBoundsException e){
            precioTotal.setText("$ " + valueOf(suma));
        }
    }

    private void eliminarItemProducto() {
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        if (tabla.getRowCount()!=0){
            try{
                tabla.removeRow(detalleProducto.getSelectedRow());
            }catch (ArrayIndexOutOfBoundsException e){
                JOptionPane.showMessageDialog(null, "Debe seleccionar el producto"
                        + " a eliminar");
            }
        }
    }

    private void recalcularImporte() {
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        if (tabla.getRowCount()!=0){
        
            for (int i = 0; i<tabla.getRowCount(); i++){
                Producto prod = GestorProducto.ConsultaProducto(parseLong(detalleProducto.getValueAt(i, 0).toString()));
                float precio;
                int op = formaDePago.getSelectedIndex();
                switch (op){
                case 0:
                    if (prod.getPrecioContado()!=0){
                        precio=prod.getPrecioContado();
                    }else{
                        if (prod.getPrecioDebito()!=0){
                            precio=prod.getPrecioDebito();
                        }else{
                            precio=prod.getPrecioCredito();
                        }
                    }
                    break;
                case 1:
                    if (prod.getPrecioDebito()!=0){
                        precio=prod.getPrecioDebito();
                    }else{
                        if (prod.getPrecioCredito()!=0){
                            precio=prod.getPrecioCredito();
                        }else{
                            precio=prod.getPrecioContado();
                        }
                    }
                    break;
                default: //Credito y otros
                    if (prod.getPrecioCredito()!=0){
                        precio=prod.getPrecioCredito();
                    }else{
                        if (prod.getPrecioDebito()!=0){
                            precio=prod.getPrecioDebito();
                        }else{
                            precio=prod.getPrecioContado();
                        }
                    }
                break;
            }
                    //float precioTotalNuevo = parseFloat(tabla.getValueAt(i,3).toString())*parseInt(detalleProducto.getValueAt(i, 2).toString());
                    float precioTotalNuevo = precio*parseInt(detalleProducto.getValueAt(i, 2).toString());
                    Object [] row = {prod.getCodigoDeProducto(), prod.getNombreProducto(), 
                    parseInt(detalleProducto.getValueAt(i, 2).toString()), precio, precioTotalNuevo, precioTotalNuevo*iva};
                    tabla.insertRow(i, row);
                    tabla.removeRow(i+1);
            } 
        }
        actualizarTotal();
    }

    private boolean validar() {
        boolean validar = true;
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        if (tabla.getRowCount()==0){
            JOptionPane.showMessageDialog(null, "No hay ningún renglón");
            validar = false;
        }

        if (clienteElegido.getText().equalsIgnoreCase("") && (formaDePago.getSelectedIndex()==3 || formaDePago.getSelectedIndex()==4)){
            JOptionPane.showMessageDialog(null, "La forma de pago requiere seleccionar un cliente");
            validar = false;
        }
        return validar;
    }

    private int crearPresupuesto() {
        int status = 0;
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        int nuevoPresupuesto;
        
        Date fecha = new Date();      
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fecha); 
        calendar.add(Calendar.DAY_OF_YEAR, 30); 
        SimpleDateFormat formateador = new SimpleDateFormat("yyyy-MM-dd");
        String fechaVigencia = formateador.format(calendar.getTime());
        
        int codCliente = 0;
        if (listaCliente.getSelectedItem()!=null){
            Cliente c = (Cliente) listaCliente.getSelectedItem();
            codCliente = c.getIdCliente();
        }
        
        if(codCliente!=0){
            nuevoPresupuesto = GestorPresupuesto.agregarPresupuesto(codCliente, fechaVigencia);
        }else{
            nuevoPresupuesto = GestorPresupuesto.agregarPresupuesto(fechaVigencia);
        }
        
        if (nuevoPresupuesto!=0){
            ArrayList<String> renglon = new ArrayList();
            for (int i = 0; i<tabla.getRowCount(); i++){
                long codiProd = parseLong(tabla.getValueAt(i,0).toString());
                int cantidad = parseInt(tabla.getValueAt(i,2).toString());
                float precioRenglon = parseFloat(tabla.getValueAt(i,5).toString());
                String precioUnitarioConIVa = valueOf(parseFloat(tabla.getValueAt(i,3).toString())*iva);
                
                GestorPresupuesto.productoPresupuesto(nuevoPresupuesto, codiProd, cantidad, precioRenglon);

                String descripcionProd = tabla.getValueAt(i,1).toString();
                try{
                    descripcionProd= tabla.getValueAt(i,1).toString().substring(0, 30);
                }catch (StringIndexOutOfBoundsException e){
                }
                
                renglon.add(descripcionProd + "\n\r x " + tabla.getValueAt(i,2).toString()
                + "\t\t" + precioUnitarioConIVa + " = " + tabla.getValueAt(i,5).toString());
            }
            imprimir(renglon,precioTotal.getText(), nuevoPresupuesto);
            status = nuevoPresupuesto;
        }
    return status;
    }
    
    private void imprimir(ArrayList<String> renglonPresupuesto, String total, int nuPresup){
        
        DocFlavor byar = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        
        //Aqui selecciona tu impresora, el ejemplo tomará la impresora predeterminada.
        PrintService impresoraDefa = PrintServiceLookup.lookupDefaultPrintService();
        DocPrintJob trabajoImpresora = impresoraDefa.createPrintJob();
        
        String detalle = "---------------------------\n\r"
                + "Abracadabra Cotillon de \n\r"
                + "Demichelis Cintia \n\r" 
                + "CUIT: 27-29759893-2 \n\r"
                + "Domicilio: Saenz Peña 1240 \n\r"
                + "Telefono: 03437-15440136 \n\n\r"
                + "Ticket Numero: " + valueOf(nuPresup)
                + "\n\r DETALLE: \n\r";
        
        
        for (int i=0; i<renglonPresupuesto.size();i++){
            detalle += renglonPresupuesto.get(i) + "\n\r";
        }
        
        detalle += "\n Monto Total: " + total;
        
        String mostrar = detalle.replaceAll("á","a").replaceAll("é", "e")
                .replaceAll("í", "i").replaceAll("ó", "o").replaceAll("ú", "u")
                .replaceAll("ü", "u").replaceAll("ñ", "n");
                
        byte[] bytes = mostrar.getBytes();
        
        Doc doc = new SimpleDoc(bytes, byar, null);
        
        try {
            trabajoImpresora.print(doc, null);
        } catch (PrintException e) {
            System.out.println(e);
        }
    }

    private void concretarVenta(int codiProd) {
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        int cantidad;
        long producto;
        int nuevaVenta=0;
        
        for (int i = 0; i<tabla.getRowCount(); i++){
            producto = parseLong(tabla.getValueAt(i,0).toString());
            cantidad = parseInt(tabla.getValueAt(i,2).toString());
            GestorProducto.restarCantidadProducto(producto, cantidad);
        }
        
        try{
            nuevaVenta=GestorVenta.registrarVenta(codiProd, parseFloat(precioTotal.getText().substring(2)));
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Error al registrar la  venta");
        }
        
        if (nuevaVenta!=0){
            String textoVenta="";
            Cliente q;
            String nomCli ="";
            int idCli = 0;
            try { 
                q = (Cliente) listaCliente.getSelectedItem();
                nomCli = q.getNombreCliente();
                idCli = q.getIdCliente();
            }catch (Error e){
                System.out.println("Error al adquirir datos de cliente");
            }
            
            switch (formaDePago.getSelectedIndex()){
                case 0:
                    if (idCli!=0){
                        try{
                            GestorPago.ingresarPago(idCli, parseFloat(precioTotal.getText().substring(2)), 1);
                        }catch (NullPointerException e){
                            System.out.println("No hay cliente seleccionado");
                        }
                    }
                    textoVenta = "\n\r Pago realizado \n\r Gracias por su compra \n\r Comprobante Nr " + valueOf(nuevaVenta);
                    break;
                    
                case 1: 
                    JOptionPane.showMessageDialog (null, "Venta Concretada", "Pago con Tarjeta de Débito", JOptionPane.INFORMATION_MESSAGE);
                    textoVenta = "\n\r Pago realizado \n\r Gracias por su compra \n\r Comprobante Nr " + valueOf(nuevaVenta);
                    if (idCli!=0){
                        try{
                            GestorPago.ingresarPago(idCli, parseFloat(precioTotal.getText().substring(2)), 1);
                        }catch (NullPointerException e){
                            System.out.println("No hay cliente seleccionado");
                        }
                    }
                    break;
                    
                case 2: 
                    JOptionPane.showMessageDialog (null, "Venta Concretada", "Pago con Tarjeta de Crédito", JOptionPane.INFORMATION_MESSAGE);
                    textoVenta = "\n\r Pago realizado \n\r Gracias por su compra\n\r Comprobante Nr " + valueOf(nuevaVenta);
                    if (idCli!=0){
                        try{
                            GestorPago.ingresarPago(idCli, parseFloat(precioTotal.getText().substring(2)), 1);
                        }catch (NullPointerException e){
                            System.out.println("No hay cliente seleccionado");
                        }
                    }
                    break;
                    
                case 3:
                   JOptionPane.showMessageDialog (null, "Venta Concretada, pago pendiente", 
                           "Cuenta Corriente", JOptionPane.INFORMATION_MESSAGE);
                   textoVenta = "\n\r Gracias por su compra \n\r Comprobante Nr " + valueOf(nuevaVenta) + "\n\r pago pendiente \n\r"
                           + nomCli+ "\n\r";
                   break;
                    
                case 4: 
                    String result = "";
                    float anticipo = 0;
                    while (result == ""){
                        result = JOptionPane.showInputDialog(jScrollPane2, "Ingrese el importe abonado como anticipo");
                        try{
                            anticipo=parseFloat(result);
                        }catch (NumberFormatException e){
                            result="";
                        }catch (NullPointerException e){
                            result="";
                        }
                    }
                    
                    if (anticipo!=0){
                        try{
                            GestorPago.ingresarPago(idCli, anticipo, 1);
                        }catch (NullPointerException e){
                            System.out.println("No hay cliente seleccionado");
                        }
                    }
                    textoVenta = "\n\r Gracias por su compra\n\r Comprobante Nr " + valueOf(nuevaVenta) + "\n\r Cliente: "
                            + nomCli + "\n\r Anticipo abonado: $" + valueOf(anticipo);
                    break;
                    
                default: break;
            }
            GestorPresupuesto.presupuestoAVenta(nuevaVenta, codiProd);
            
            int retry = 0;
            
            while (retry==0){
                if (imprimir(textoVenta)==true){
                    retry=1;
                    this.dispose();
                }else{
                    int confirmado = JOptionPane.showConfirmDialog(aVenta, 
                    "No se pudo imprimir ¿Desea reintentar?");
                    if (JOptionPane.OK_OPTION == confirmado){
                        retry=0;
                    }else{
                        retry=1;
                    }
                }
            }
        }
    }

    private boolean imprimir(String textoVenta) {
        boolean impresion = false;
        DocFlavor byar = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        
        PrintService impresoraDefa = PrintServiceLookup.lookupDefaultPrintService();
        DocPrintJob trabajoImpresora = impresoraDefa.createPrintJob();
        
        String detalle = textoVenta;
        
        String mostrar = detalle.replaceAll("á","a").replaceAll("é", "e")
                .replaceAll("í", "i").replaceAll("ó", "o").replaceAll("ú", "u")
                .replaceAll("ü", "u").replaceAll("ñ", "n");
                
        byte[] bytes = mostrar.getBytes();
        
        Doc doc = new SimpleDoc(bytes, byar, null);
        
        try {
            trabajoImpresora.print(doc, null);
            impresion = true;
        } catch (PrintException e) {
            System.out.println(e);
        }
        return impresion;
    }
    
    public void cargarPresupuesto(Presupuesto pre){
        DefaultTableModel tabla = (DefaultTableModel) detalleProducto.getModel();
        try{
            listaCliente.addItem(GestorCliente.ConsultaPorDescripcion(pre.getIdCliente()).get(0));
        }catch (Exception e){
        }
        long codPrueva = 0;
        float prePrueva = 0;
        int cantPrueva = 0;

        for (int i=0; i<GestorProducto.presupuestoProducto(pre.getIdPresupuesto()).size(); i++){
            tabla.addRow((Object[]) GestorProducto.presupuestoProducto(pre.getIdPresupuesto()).get(i));
            codPrueva = parseLong(detalleProducto.getValueAt(i, 0).toString());
            prePrueva = parseFloat(detalleProducto.getValueAt(i, 3).toString());
            cantPrueva= parseInt(detalleProducto.getValueAt(i, 2).toString());
            //detalleProducto.setValueAt(detalleProducto.getValueAt(i, 3),i,5); //pone el valor de la posición 3 en la posición 5 -> precio Total
            //detalleProducto.setValueAt(null,i,3); //borra la posición 3 (en verdad debería poner la posición 5 dividida la cantidad
        }

        Producto pro = GestorProducto.ConsultaProducto(codPrueva);
        if (pro.getPrecioContado()*iva==(prePrueva/cantPrueva)){
            formaDePago.setSelectedIndex(0);
        }else{
            if (pro.getPrecioDebito()*iva==(prePrueva/cantPrueva)){
                formaDePago.setSelectedIndex(1);
            }else{
                formaDePago.setSelectedIndex(2);
            }
        }
        recalcularImporte();
        actualizarTotal();
    }
    
        private void abrirAyuda(){
        try {
            //File file = new File(System.getProperty("user.dir") + "\\src\\ayuda\\Manual_Gestion_Presupuesto.pdf");
            //Desktop.getDesktop().open(file);
            
            if (Desktop.isDesktopSupported()) {
            File file = new File("Ayuda_Nuevo_Presupuesto.pdf");
            if (!file.exists()) {
                InputStream inputStream = ClassLoader.getSystemClassLoader()
                                    .getResourceAsStream("ayuda/Ayuda_Nuevo_Presupuesto.pdf");
                OutputStream outputStream = new FileOutputStream(file);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                outputStream.close();
                inputStream.close();
            }
            Desktop.getDesktop().open(file);
            }
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "No se puedo abrir el archivo de ayuda");
        }
    }
}